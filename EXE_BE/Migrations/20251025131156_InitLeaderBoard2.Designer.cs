// <auto-generated />
using System;
using EXE_BE.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EXE_BE.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251025131156_InitLeaderBoard2")]
    partial class InitLeaderBoard2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EXE_BE.Models.Challenge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("isComplete")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Challenges");
                });

            modelBuilder.Entity("EXE_BE.Models.ChallengeProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChallengeId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("Progress")
                        .HasColumnType("real");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<bool>("isComplete")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.HasIndex("UserId");

                    b.ToTable("ChallengeProgresses");
                });

            modelBuilder.Entity("EXE_BE.Models.EnergyUsage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("integer");

                    b.Property<float>("CO2emission")
                        .HasColumnType("float");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("electricityconsumption")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId")
                        .IsUnique();

                    b.ToTable("EnergyUsages", (string)null);
                });

            modelBuilder.Entity("EXE_BE.Models.FoodUsage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("integer");

                    b.Property<float>("CO2emission")
                        .HasColumnType("float");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("score")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId")
                        .IsUnique();

                    b.ToTable("FoodUsages", (string)null);
                });

            modelBuilder.Entity("EXE_BE.Models.ItemList.FoodItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FoodCategory")
                        .HasColumnType("integer");

                    b.Property<int>("FoodUsageId")
                        .HasColumnType("integer");

                    b.Property<float>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FoodUsageId");

                    b.ToTable("FoodItems", (string)null);
                });

            modelBuilder.Entity("EXE_BE.Models.ItemList.PlasticItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PlasticCategory")
                        .HasColumnType("integer");

                    b.Property<int>("PlasticUsageId")
                        .HasColumnType("integer");

                    b.Property<float>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("PlasticUsageId");

                    b.ToTable("PlasticItems", (string)null);
                });

            modelBuilder.Entity("EXE_BE.Models.Leaderboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LeaderboardData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Leaderboards");
                });

            modelBuilder.Entity("EXE_BE.Models.Notify", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Reason")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Notifies");
                });

            modelBuilder.Entity("EXE_BE.Models.PlasticUsage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("integer");

                    b.Property<float>("CO2emission")
                        .HasColumnType("float");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId")
                        .IsUnique();

                    b.ToTable("PlasticUsages", (string)null);
                });

            modelBuilder.Entity("EXE_BE.Models.TrafficUsage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("integer");

                    b.Property<float>("CO2emission")
                        .HasColumnType("float");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("distance")
                        .HasColumnType("float");

                    b.Property<int>("trafficCategory")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId")
                        .IsUnique();

                    b.ToTable("TrafficUsages", (string)null);
                });

            modelBuilder.Entity("EXE_BE.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("EXE_BE.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<int>("SubscriptionType")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EXE_BE.Models.UserActivities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EnergyUsageId")
                        .HasColumnType("integer");

                    b.Property<int>("FoodUsageId")
                        .HasColumnType("integer");

                    b.Property<int>("PlasticUsageId")
                        .HasColumnType("integer");

                    b.Property<float>("TotalCO2Emission")
                        .HasColumnType("float");

                    b.Property<int>("TrafficUsageId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserActivities", (string)null);
                });

            modelBuilder.Entity("EXE_BE.Models.ChallengeProgress", b =>
                {
                    b.HasOne("EXE_BE.Models.Challenge", "Challenge")
                        .WithMany()
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EXE_BE.Models.User", "User")
                        .WithMany("ChallengeProgresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EXE_BE.Models.EnergyUsage", b =>
                {
                    b.HasOne("EXE_BE.Models.UserActivities", "UserActivities")
                        .WithOne("EnergyUsage")
                        .HasForeignKey("EXE_BE.Models.EnergyUsage", "ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserActivities");
                });

            modelBuilder.Entity("EXE_BE.Models.FoodUsage", b =>
                {
                    b.HasOne("EXE_BE.Models.UserActivities", "UserActivities")
                        .WithOne("FoodUsage")
                        .HasForeignKey("EXE_BE.Models.FoodUsage", "ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserActivities");
                });

            modelBuilder.Entity("EXE_BE.Models.ItemList.FoodItem", b =>
                {
                    b.HasOne("EXE_BE.Models.FoodUsage", "FoodUsage")
                        .WithMany("FoodItems")
                        .HasForeignKey("FoodUsageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodUsage");
                });

            modelBuilder.Entity("EXE_BE.Models.ItemList.PlasticItem", b =>
                {
                    b.HasOne("EXE_BE.Models.PlasticUsage", "PlasticUsage")
                        .WithMany("PlasticItems")
                        .HasForeignKey("PlasticUsageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlasticUsage");
                });

            modelBuilder.Entity("EXE_BE.Models.PlasticUsage", b =>
                {
                    b.HasOne("EXE_BE.Models.UserActivities", "UserActivities")
                        .WithOne("PlasticUsage")
                        .HasForeignKey("EXE_BE.Models.PlasticUsage", "ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserActivities");
                });

            modelBuilder.Entity("EXE_BE.Models.TrafficUsage", b =>
                {
                    b.HasOne("EXE_BE.Models.UserActivities", "UserActivities")
                        .WithOne("TrafficUsage")
                        .HasForeignKey("EXE_BE.Models.TrafficUsage", "ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserActivities");
                });

            modelBuilder.Entity("EXE_BE.Models.Transaction", b =>
                {
                    b.HasOne("EXE_BE.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EXE_BE.Models.UserActivities", b =>
                {
                    b.HasOne("EXE_BE.Models.User", "User")
                        .WithMany("UserActivities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EXE_BE.Models.FoodUsage", b =>
                {
                    b.Navigation("FoodItems");
                });

            modelBuilder.Entity("EXE_BE.Models.PlasticUsage", b =>
                {
                    b.Navigation("PlasticItems");
                });

            modelBuilder.Entity("EXE_BE.Models.User", b =>
                {
                    b.Navigation("ChallengeProgresses");

                    b.Navigation("UserActivities");
                });

            modelBuilder.Entity("EXE_BE.Models.UserActivities", b =>
                {
                    b.Navigation("EnergyUsage")
                        .IsRequired();

                    b.Navigation("FoodUsage")
                        .IsRequired();

                    b.Navigation("PlasticUsage")
                        .IsRequired();

                    b.Navigation("TrafficUsage")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
